#
# This is a Gisele process for the Meeting Scheduler example, similar to what can be found
# in [Lam11]. The main difference between this model and the one defined there is the use
# of tracking variables. Tracking variables are introduced and explained in [Dam11].
#
# The Meeting Scheduler examplar [Fea97]
#
#     A meeting initiator issues a meeting request, specifying the expected participants and
#     the date range within which the meeting should take place. The scheduler then sends an
#     electronic invitation to each participant, requesting them to provide their date
#     constraints.
#
#     A date conflict occurs when no date can be found that fits all participant constraints.
#     In such case, the initiator may extend the date range or request some participants to
#     weaken their constraints; a new scheduling cycle is then required. Otherwise, the
#     meeting is planned at a date meeting all constraints.
#
#     A soft goal requires meetings to be scheduled as quickly as possible once initiated;
#     another one requires interactions with participants to be minimized. In the simplified
#     version considered here, only two scheduling cycles are allowed; the meeting is planned
#     after that. In such case, we will assume that the best date is chosen so as to maximize
#     the number of participants attending. We also ignore features like meeting cancellations,
#     meeting locations, etc.
#
# References
#
#   * [Dam11] Christophe Damas, Analyzing Multi-View Models of Software Systems, PhD thesis,
#             University of Louvain, November 2011
#   * [Fea97] M.S. Feather, S. Fickas, A. Finkelstein and A. van Lamsweerde, Requirements and
#             Specification Exemplars, Automated Software Engineering, 1997
#   * [Lam11] Bernard Lambeau, Synthesizing Multi-View Models of Software Systems, PhD thesis,
#             University of Louvain, November 2011
#
task MeetingScheduling

  # This fluent encodes the occurence of a second cycle, becoming true when constraints
  # have been weakened or the date range extended.
  fluent secondCycle
    {WeakenConstraints:end, ExtendDateRange:end},
    {InitiateMeeting:end}
  initially false

  # A date conflict may only occur when constraints are acquired or weakened. Being a tracking
  # variable and not fluent, we do not know the exact value of this variable when these tasks
  # occur.
  trackvar dateConflict
    {AcquireConstraints:end, WeakenConstraints:end}
  initially false

  # The arbitrator decides to resolve a conflict during the Arbitrate task. The following
  # definition does not capture the precise value of the variable but only that the value
  # can only change during Arbitrate.
  trackvar resolveByWeakening
    {Arbitrate:end}
  initially false

  # This is the task refinement
  seq
    InitiateMeeting
    AcquireConstraints
    while dateConflict and not(secondCycle)
      Arbitrate
      if resolveByWeakening
        WeakenConstraints
      else
        ExtendDateRange
        AcquireConstraints
      end
    end
    ScheduleMeeting
  end

end