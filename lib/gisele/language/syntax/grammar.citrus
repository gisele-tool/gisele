grammar Gisele::Language::Syntax::Grammar

  ### Units

  rule unit
    (spacing task_def spacing)
    <Gisele::Language::Syntax::Unit>
  end

  ### Task definitions

  rule task_def
    ('task' spaces task_name spaces (task_signature spaces)? (task_refinement spaces)? 'end')
    <Gisele::Language::Syntax::TaskDef>
  end

  rule task_signature
    (task_signature_element (spaces task_signature_element)*)
    <Gisele::Language::Syntax::TaskSignature>
  end

  rule task_signature_element
    fluent_def | trackvar_def | task_def
  end

  rule task_refinement
    ('refinement' spaces process_statement spaces 'end')
    <Gisele::Language::Syntax::TaskRefinement>
  end

  ### Process statements

  rule process_statement
    implicit_seq_st | explicit_statement
  end

  rule implicit_seq_st
    (explicit_statement spaces st_list)
    <Gisele::Language::Syntax::ImplicitSeqSt>
  end

  rule st_list
    (explicit_statement (spaces explicit_statement)*)
    <Gisele::Language::Syntax::StList>
  end

  rule explicit_statement
      if_st
    | while_st
    | seq_st
    | par_st
    | task_call_st
  end

  rule if_st
    ('if' spaces bool_expr spaces process_statement spaces elsif_clause* else_clause? 'end')
    <Gisele::Language::Syntax::IfSt>
  end

  rule elsif_clause
    ('elsif' spaces bool_expr spaces process_statement spaces)
    <Gisele::Language::Syntax::ElsifClause>
  end

  rule else_clause
    ('else' spaces process_statement spaces)
    <Gisele::Language::Syntax::ElseClause>
  end

  rule while_st
    ('while' spaces bool_expr spaces process_statement spaces 'end')
    <Gisele::Language::Syntax::WhileSt>
  end

  rule seq_st
    ('seq' spaces st_list spaces 'end')
    <Gisele::Language::Syntax::SeqSt>
  end

  rule par_st
    ('par' spaces st_list spaces 'end')
    <Gisele::Language::Syntax::ParSt>
  end

  rule task_call_st
    (task_name)
    <Gisele::Language::Syntax::TaskCallSt>
  end

  ### Boolean expressions

  rule bool_expr
    (spacing theexpr:bool_or)
    <Gisele::Language::Syntax::BoolExpr>
  end

  rule bool_or
      (left:bool_and spaces 'or' spaces right:bool_or)
      <Gisele::Language::Syntax::BoolOr>
    | bool_and
  end

  rule bool_and
      (left:bool_not spaces 'and' spaces right:bool_and)
      <Gisele::Language::Syntax::BoolAnd>
    | bool_not
  end

  rule bool_not
      ('not' &([ \t\n] | '(') spacing expr:bool_not)
      <Gisele::Language::Syntax::BoolNot>
    | bool_term
  end

  rule bool_term
    bool_paren | bool_lit | bool_varref
  end

  rule bool_paren
    ('(' spacing expr:bool_or spacing ')')
    <Gisele::Language::Syntax::BoolParen>
  end

  rule bool_lit
    (boolean_literal)
    <Gisele::Language::Syntax::BoolLit>
  end

  rule bool_varref
    (variable_name)
    <Gisele::Language::Syntax::VarRef>
  end

  ### Variables

  rule variable_def
    trackvar_def | fluent_def
  end

  rule trackvar_def
    ('trackvar' spaces variable_name spacing event_set (spacing ',' spacing event_set)? initially_def?)
    <Gisele::Language::Syntax::TrackvarDef>
  end

  rule fluent_def
    ('fluent' spaces variable_name spacing event_set spacing ',' spacing event_set initially_def?)
    <Gisele::Language::Syntax::FluentDef>
  end

  rule initially_def
    (spaces 'initially' spaces lit:boolean_literal){ lit.value }
  end

  ### Events

  rule event_set
    ('{' spacing (event (spacing ',' spacing event)*)? spacing '}')
    <Gisele::Language::Syntax::EventSet>
  end

  rule event
    task_start_or_end | event_name
  end

  rule task_start_or_end
    task_name ':' ('start' | 'end')
  end

  ### Names
  
  rule task_name
    [A-Z] [A-Za-z0-9_]*
  end

  rule variable_name
    [a-z] [A-Za-z0-9_]*
  end

  rule event_name
    [a-z] [a-z0-9_]*
  end

  ### Literals

  rule boolean_literal
    ('true' | 'false'){ strip == "true" }
  end

  ### Spacing

  rule comment
    "#" (![\n] .)*
  end

  rule spaces
    (comment | [ \t\n])+
  end

  rule spacing
    (comment | [ \t\n])*
  end

end