grammar Gisele::Language::Grammar

  ### Units

  rule task_unit
    (spacing defn:task_def spacing){
      defn.value
    }
  end

  ### Task definitions

  rule task_def
    ('task' spaces tname:task_name spaces
      signature:(task_signature spaces)?
      refinement:(task_refinement spaces)?
    'end'){
      sigvalue = [:signature]  + (signature.empty?  ? [] : signature.first.first.value)
      refvalue = [:refinement, (refinement.empty? ? [] : refinement.first.first.value)]
      [:task, tname.value, sigvalue, refvalue]
    }
  end

  rule task_signature
    (front:task_signature_element tail:(spaces task_signature)?){
      [front.value] + (tail.empty? ? [] : tail.first.matches.last.value)
    }
  end

  rule task_signature_element
    fluent_def | trackvar_def
  end

  rule task_refinement
    ('refinement' spaces main:process_statement spaces 'end'){
      main.value
    }
  end

  ### Process statements

  rule process_statement
    implicit_seq_statement | explicit_statement
  end

  rule implicit_seq_statement
    (front:explicit_statement spaces tail:statement_list){
      [:seq, front.value] + tail.value
    }
  end

  rule statement_list
    (f:explicit_statement t:(spaces statement_list)?){
      [f.value] + (t.empty? ? [] : t.first.matches.last.value)
    }
  end

  rule explicit_statement
      if_statement
    | while_statement
    | seq_statement
    | par_statement
    | task_call_statement
  end

  rule if_statement
    ('if' spaces cond:bool_expr spaces
      dost:process_statement spaces
      elsifclauses:elsif_clause*
      elseclause:else_clause?
    'end'){
      elsifs = elsifclauses.matches.map{|c| c.value}
      elsec  = elseclause.empty? ? [] : [elseclause.first.value]
      [:if, cond.value, dost.value] + elsifs + elsec
    }
  end

  rule elsif_clause
    ('elsif' spaces cond:bool_expr spaces dost:process_statement spaces){
      [:elsif, cond.value, dost.value]
    }
  end

  rule else_clause
    ('else' spaces dost:process_statement spaces){
      [:else, dost.value]
    }
  end

  rule while_statement
    ('while' spaces cond:bool_expr spaces
      dost:process_statement spaces
    'end'){
      [:while, cond.value, dost.value]
    }
  end

  rule seq_statement
    ('seq' spaces list:statement_list spaces 'end'){
      [:seq] + list.value
    }
  end

  rule par_statement
    ('par' spaces list:statement_list spaces 'end'){
      [:par] + list.value
    }
  end

  rule task_call_statement
    (task_name){
      [:task_call, strip]
    }
  end

  ### Boolean expressions

  rule bool_expr
    bool_or
  end

  rule bool_or
      (left:bool_and spaces 'or' spaces right:bool_or)
      <Gisele::Language::Syntax::BoolOr>
    | bool_and
  end

  rule bool_and
      (left:bool_not spaces 'and' spaces right:bool_and)
      <Gisele::Language::Syntax::BoolAnd>
    | bool_not
  end

  rule bool_not
      ('not' &([ \t\n] | '(') spacing expr:bool_not)
      <Gisele::Language::Syntax::BoolNot>
    | bool_term
  end

  rule bool_term
    bool_paren | boolean_literal | bool_varref
  end

  rule bool_paren
    ('(' spacing expr:bool_expr spacing ')')
    <Gisele::Language::Syntax::BoolParen>
  end

  rule bool_lit
    (boolean_literal)
    <Gisele::Language::Syntax::BoolLit>
  end

  rule bool_varref
    (variable_name)
    <Gisele::Language::Syntax::VarRef>
  end

  ### Variables

  rule variable_def
    trackvar_def | fluent_def
  end

  rule trackvar_def
    ('trackvar' spaces variable_name spacing event_set (spacing ',' spacing event_set)? initially_def?)
    <Gisele::Language::Syntax::TrackvarDef>
  end

  rule fluent_def
    ('fluent' spaces variable_name spacing event_set spacing ',' spacing event_set initially_def?)
    <Gisele::Language::Syntax::FluentDef>
  end

  rule initially_def
    (spaces 'initially' spaces lit:boolean_literal){ lit.value }
  end

  ### Events

  rule event_set
    ('{' spacing (event (spacing ',' spacing event)*)? spacing '}')
    <Gisele::Language::Syntax::EventSet>
  end

  rule event
    task_start_or_end | event_name
  end

  rule task_start_or_end
    task_name ':' ('start' | 'end')
  end

  ### Names
  
  rule task_name
    [A-Z] [A-Za-z0-9_]*
  end

  rule variable_name
    [a-z] [A-Za-z0-9_]*
  end

  rule event_name
    [a-z] [a-z0-9_]*
  end

  ### Literals

  rule boolean_literal
    ('true' | 'false'){ strip == "true" }
  end

  ### Spacing

  rule comment
    "#" (![\n] .)*
  end

  rule spaces
    (comment | [ \t\n])+
  end

  rule spacing
    (comment | [ \t\n])*
  end

end